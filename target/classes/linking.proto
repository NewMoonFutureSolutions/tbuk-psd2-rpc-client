syntax = "proto3";

//option java_multiple_files = true;
package com.tbuk.grpc.psd2;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
message GetBankAuthorizationRequest {
    string accessToken = 1;
}


// Chipper Text'in icerigi de bu olacakmis aq
message PlaintextBankAuthorization {
    string member_id = 1;    // Token member id
    string account_name = 2; // e.g., "Checking account with # ending 5678"
    BankAccount account = 3;
    int64 expiration_ms = 4; // Expiration time
}

// ======

message BankAccount {

    Custom custom=1;

}
// Custom authorization
message Custom {
    string bankId = 1;
    string payload = 2;
}

message AccountFeatures {
    bool supports_payment = 1;            // **DEPRECATED** can both send and receive payments
    bool supports_information = 2;        // can get info, e.g., get balance
    bool requires_external_auth = 3;
    bool supports_send_payment = 4;       // can send payments from account
    bool supports_receive_payment = 5;    // can receive payments to account
}

message BankAuthorization {
    string bank_id = 1;  // "TBUK"
    repeated SealedMessage accounts = 2; //
}

message SealedMessage {
    string ciphertext = 1;              // Base64url encoded ciphertext.

    oneof method {
        NoopMethod noop = 4;              // Noop encryption
        RsaMethod rsa = 6;                // RSA blocks method
        RsaAesMethod rsa_aes = 7;         // RSA/AES Method specific metadata
    }

    // Sifreleme yapmadan text hali ile
    message NoopMethod {
    }

    // Rsa method ile encrypt edilecekse, - simdilik gerek yok
    message RsaMethod {
        string key_id = 1;
        string algorithm = 2;             // RSA/ECB/OAEPWithSHA-256AndMGF1Padding
        string signature = 3;             // Base64url encoded ciphertext signature.
        string signature_key_id = 4;      // the key-id of the signature
    }

    // RsaAes ile sifreleme
    message RsaAesMethod {
        string rsa_key_id = 1;            // The id of the key used for encryption
        string rsa_algorithm = 2;         // RSA/ECB/OAEPWithSHA-256AndMGF1Padding
        string aes_algorithm = 3;         // AES/CBC/PKCS5Padding
        string encrypted_aes_key = 5;     // Base64url encoded rsa-encrypted aes key
        string signature = 6;             // Base64url encoded ciphertext signature.
        string signature_key_id = 7;      // the key-id of the signature
    }
}


// ====== ***

service AccountLinkingService {
    rpc GetBankAuthorization (GetBankAuthorizationRequest) returns (BankAuthorization) {
        option (google.api.http) = {
        get: "/linking/authorizations/{accessToken}"
    };
    }
}

//throw new LinkServiceException1("Access token is missing or invalid.");

//error haric yapildi..